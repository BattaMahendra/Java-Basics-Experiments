1. TreeMap is slower for insertion, retrieval, and deletion compared to HashMap and LinkedHashMap because of its logarithmic time complexity.
2. TreeMap guarantees a sorted order of its elements based on the keys, which HashMap and LinkedHashMap do not.
3. HashMap and LinkedHashMap are generally faster for most operations, especially in scenarios with a large number of elements,
   but they do not guarantee any specific order.

Internal working of Hashmap: https://dip-mazumder.medium.com/how-hashmap-internally-works-in-java-8-e72bb8697e06
Interanl working of LinkedHashMap: https://www.dineshonjava.com/internal-working-of-linkedhashmap-in-java/



TreeMap vs LInkedHashMap vs HashMap vs HashTable

TreeMap:

Data Structure: Implemented as a red-black tree.
Ordering: Maintains elements sorted based on keys (natural order or custom comparator).
Performance: Logarithmic time complexity for most operations.
Nulls: Doesn't allow null keys, but allows null values if the comparator supports them.
Use Case: Ideal for scenarios where elements need to be stored in a sorted order based on keys.

LinkedHashMap:

Data Structure: Combines a hash table with a doubly-linked list.
Ordering: Maintains insertion order of elements.
Performance: Similar to HashMap for most operations, but slightly slower due to maintaining insertion order.
Nulls: Allows both null keys and values.
Use Case: Suitable when maintaining insertion order is required, like LRU caches.


HashMap:

Data Structure: Utilizes a hash table for storing key-value pairs.
Ordering: Doesn't maintain any order of elements.
Performance: Generally provides constant time complexity for most operations (average-case), but can degrade to O(n) in worst-case scenarios.
Nulls: Allows both null keys and values.
Use Case: Preferred for general-purpose use cases where fast access and no specific order are required.

HashTable:

Data Structure: Utilizes a hash table for storing key-value pairs.
Ordering: Doesn't maintain any order of elements.
Performance: Similar to HashMap, but synchronized, leading to slower performance in multi-threaded environments.
Nulls: Doesn't allow null keys or values.
Use Case: Deprecated in favor of ConcurrentHashMap for thread-safe operations. Previously used in legacy codebases where thread safety was required.


Summary:
In summary, the choice among these implementations depends on specific requirements:

Use TreeMap when elements need to be sorted based on keys.
Use LinkedHashMap when maintaining insertion order is important.
Use HashMap for general-purpose use cases with no specific order requirements and fast access.
Use HashTable only in legacy codebases where thread safety is required, preferring ConcurrentHashMap for new developments.

ConcurrentHashMap

One of the key features of the ConcurrentHashMap is that it provides fine-grained locking,
meaning that it locks only the portion of the map being modified, rather than the entire map.
This makes it highly scalable and efficient for concurrent operations.
Additionally, the ConcurrentHashMap provides various methods for atomic operations such as putIfAbsent(), replace(), and remove().

Key points of ConcurrentHashMap:

1.The underlined data structure for ConcurrentHashMap is Hashtable.
2.ConcurrentHashMap class is thread-safe i.e. multiple threads can operate on a single object without any complications.
3.At a time any number of threads are applicable for a read operation without locking the ConcurrentHashMap object which is not there in HashMap.
4.In ConcurrentHashMap, the Object is divided into a number of segments according to the concurrency level.
5.The default concurrency-level of ConcurrentHashMap is 16.
6.In ConcurrentHashMap, at a time any number of threads can perform retrieval operation but for updated in the object, the thread must lock the particular segment in which the thread wants to operate.
This type of locking mechanism is known as Segment locking or bucket locking. Hence at a time, 16 update operations can be performed by threads.
7.Inserting null objects is not possible in ConcurrentHashMap as a key or value.

highly recommended to go to this website and read up to last : https://www.geeksforgeeks.org/concurrenthashmap-in-java/

also refer github repo for more qs on maps: https://github.com/BattaMahendra/Necessary/edit/master/Interview-questions/java8/maps



Why HashTable Doesnâ€™t Allow null and HashMap Do?

In the above differences between HashTable and HashMap,
there is a point : A HashMap can allow null keys and values, whereas a HashTable does not allow null.
You must be wondering, why a HashMap can store a null whereas HashTable cannot store a null. Let us understand the reason in detail.

A HashTable stores the object in the key, value pair.
In order to store and retrieve the object successfully, the object which is used as a key must implement the hashCode method and the equals method.
Since null is not an object, it cannot implement these hashCode method and the equals method.
 So if we store null inside the HashTable, it will not work and throw a null pointer exception error.
 However, HashMap is a modern version of HashTable and it was created later.
 It will allow one null key and any number of null values.

 In Hashmap if the key is null then hashing of null is 0 which means it is always stored in the first bucket.
 In this way hashmap allows only one null key.


